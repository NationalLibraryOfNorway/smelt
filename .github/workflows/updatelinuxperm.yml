name: Update Linux Executable Permissions

on:
  workflow_run:
    workflows: ["Build with PyInstaller and Create Release"]
    types:
      - completed

jobs:
  update-permissions:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get latest release information
      id: get_release_info
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest)
        echo "::set-output name=LATEST_RELEASE::$LATEST_RELEASE"
        echo $LATEST_RELEASE | jq -r '.assets[] | select(.name == "Smelt") | .browser_download_url' > ASSET_URL.txt
        if [ ! -s ASSET_URL.txt ]; then
          echo "Error: Could not find the asset URL for Smelt" >&2
          exit 1
        fi
        ASSET_URL=$(cat ASSET_URL.txt)
        echo "ASSET_URL=$ASSET_URL" >> $GITHUB_ENV
        echo $LATEST_RELEASE | jq -r '.html_url' | sed 's/{?name,label}//' > UPLOAD_URL.txt
        UPLOAD_URL=$(cat UPLOAD_URL.txt)
        echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_ENV

    - name: Output extracted values
      run: |
        echo "Extracted ASSET_URL: $ASSET_URL"
        echo "Extracted UPLOAD_URL: $UPLOAD_URL"

    - name: Print JSON response
      run: echo "${{ steps.get_release_info.outputs.LATEST_RELEASE }}"

    - name: Extract release id
      id: extract_release_id
      run: |
        RELEASE_ID=$(echo "${{ steps.get_release_info.outputs.LATEST_RELEASE }}" | jq -r '.release.id')
        echo "::set-output name=RELEASE_ID::$RELEASE_ID"

    - name: Check release ID
      run: |
        if [ -z "${{ steps.extract_release_id.outputs.RELEASE_ID }}" ]; then
          echo "Error: Could not extract release ID" >&2
          exit 1
        fi

    - name: Download Linux executable
      run: |
        curl -L -H "Accept: application/octet-stream" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ env.ASSET_URL }} -o ./Smelt

    - name: Update permissions
      run: chmod +x ./Smelt

    - name: Verify executable permissions
      run: ls -l ./Smelt

    - name: Re-upload Linux executable
      run: |
        # Extract release id
        RELEASE_ID=$(echo "$LATEST_RELEASE" | jq -r '.id')
        echo "Extracted RELEASE_ID: $RELEASE_ID"
        # Delete existing asset
        ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ env.ASSET_URL }} | jq -r '.id')
        echo "Extracted ASSET_ID: $ASSET_ID"
        curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID
        # Re-upload the asset
        curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Content-Type: application/octet-stream" \
             --data-binary @./Smelt \
             ${{ env.UPLOAD_URL }}?name=Smelt

    - name: Check artifact permissions after upload
      run: ls -l ./Smelt
